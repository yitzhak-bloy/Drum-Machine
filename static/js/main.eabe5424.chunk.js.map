{"version":3,"sources":["ListOfSounds.js","drumMachine.jsx","App.js","serviceWorker.js","index.js"],"names":["ListOfSounds","id","src","key","DrumMachine","useState","nameOfSound","setNameOfSound","useEffect","document","addEventListener","e","keyCode","getElementById","play","map","item","className","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQAgDeA,G,MAhDM,CACjB,CACEC,GAAI,WACJC,IAAK,2DACLC,IAAK,KAEP,CACEF,GAAI,WACJC,IAAK,2DACLC,IAAK,KAEP,CACEF,GAAI,WACJC,IAAK,2DACLC,IAAK,KAEP,CACEF,GAAI,aACJC,IAAK,6DACLC,IAAK,KAEP,CACEF,GAAI,WACJC,IAAK,2DACLC,IAAK,KAEP,CACEF,GAAI,SACJC,IAAK,yDACLC,IAAK,KAEP,CACEF,GAAI,aACJC,IAAK,6DACLC,IAAK,KAEP,CACEF,GAAI,SACJC,IAAK,yDACLC,IAAK,KAEP,CACEF,GAAI,UACJC,IAAK,0DACLC,IAAK,OCiCIC,MAzEf,WAAwB,IAAD,EAEiBC,mBAAS,iCAF1B,mBAEdC,EAFc,KAEDC,EAFC,KAgDrB,OA5CAC,qBAAU,WACRC,SAASC,iBAAiB,WAAW,SAACC,GACpC,OAAQA,EAAEC,SACR,KAAK,GACHH,SAASI,eAAe,KAAKC,OAC7BP,EAAe,YACf,MACF,KAAK,GACHE,SAASI,eAAe,KAAKC,OAC7BP,EAAe,YACf,MACF,KAAK,GACHE,SAASI,eAAe,KAAKC,OAC7BP,EAAe,YACf,MACF,KAAK,GACHE,SAASI,eAAe,KAAKC,OAC7BP,EAAe,cACf,MACF,KAAK,GACHE,SAASI,eAAe,KAAKC,OAC7BP,EAAe,YACf,MACF,KAAK,GACHE,SAASI,eAAe,KAAKC,OAC7BP,EAAe,UACf,MACF,KAAK,GACHE,SAASI,eAAe,KAAKC,OAC7BP,EAAe,cACf,MACF,KAAK,GACHE,SAASI,eAAe,KAAKC,OAC7BP,EAAe,UACf,MACF,KAAK,GACHE,SAASI,eAAe,KAAKC,OAC7BP,EAAe,kBAQrB,6BACE,yBAAKN,GAAG,gBACR,4CACE,yBAAKA,GAAG,WACLK,GAEFN,EAAae,KAAI,SAACC,GACjB,OACE,4BAAQC,UAAU,WAAWhB,GAAIe,EAAKf,GAAIE,IAAKa,EAAKb,IAAKe,QAAS,WAChDT,SAASI,eAAeG,EAAKb,KACrCW,OACNP,EAAeS,EAAKf,MAGtB,2BAAOgB,UAAU,OAAOhB,GAAIe,EAAKb,IAAKD,IAAKc,EAAKd,MAC/Cc,EAAKb,W,MCvDLgB,MARf,WACE,OACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,QCIcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASI,eAAe,SD2H3C,kBAAmBc,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eabe5424.chunk.js","sourcesContent":["const ListOfSounds = [\r\n    {\r\n      id: 'Heater-1',\r\n      src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3',\r\n      key: 'Q'\r\n    },\r\n    {\r\n      id: 'Heater-2',\r\n      src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3',\r\n      key: 'W'\r\n    },\r\n    {\r\n      id: 'Heater-3',\r\n      src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3',\r\n      key: 'E'\r\n    },\r\n    {\r\n      id: 'Heater-4_1',\r\n      src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3',\r\n      key: 'A'\r\n    },\r\n    {\r\n      id: 'Heater-6',\r\n      src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3',\r\n      key: 'S'\r\n    },\r\n    {\r\n      id: 'Dsc_Oh',\r\n      src: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3',\r\n      key: 'D'\r\n    },\r\n    {\r\n      id: 'RP4_KICK_1',\r\n      src: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3',\r\n      key: 'Z'\r\n    },\r\n    {\r\n      id: 'Cev_H2',\r\n      src: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3',\r\n      key: 'X'\r\n    },\r\n    {\r\n      id: 'Chord_2',\r\n      src: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3',\r\n      key: 'C'\r\n    }\r\n]\r\n\r\nexport default ListOfSounds","import React, { useState, useEffect } from 'react';\r\nimport './drumMachine.scss';\r\nimport ListOfSounds from './ListOfSounds'\r\n\r\nfunction DrumMachine() {\r\n\r\n  const [nameOfSound, setNameOfSound] = useState('Click a button or Press a key');\r\n\r\n  useEffect(() =>  {\r\n    document.addEventListener('keydown', (e) => {\r\n      switch (e.keyCode) {\r\n        case 81:\r\n          document.getElementById('Q').play();\r\n          setNameOfSound('Heater-1')\r\n          break;\r\n        case 87:\r\n          document.getElementById('W').play();\r\n          setNameOfSound('Heater-2')\r\n          break;\r\n        case 69:\r\n          document.getElementById('E').play();\r\n          setNameOfSound('Heater-3')\r\n          break;\r\n        case 65:\r\n          document.getElementById('A').play();\r\n          setNameOfSound('Heater-4_1')\r\n          break;\r\n        case 83:\r\n          document.getElementById('S').play();\r\n          setNameOfSound('Heater-6')\r\n          break;\r\n        case 68:\r\n          document.getElementById('D').play();\r\n          setNameOfSound('Dsc_Oh')\r\n          break;\r\n        case 90:\r\n          document.getElementById('Z').play();\r\n          setNameOfSound('RP4_KICK_1')\r\n          break;\r\n        case 88:\r\n          document.getElementById('X').play();\r\n          setNameOfSound('Cev_H2')\r\n          break;\r\n        case 67:\r\n          document.getElementById('C').play();\r\n          setNameOfSound('Chord_2')\r\n          break;\r\n        default:\r\n      }\r\n    });\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"drum-machine\">\r\n      <h1>drum machine</h1>\r\n        <div id=\"display\" >\r\n          {nameOfSound}\r\n        </div>\r\n        {ListOfSounds.map((item) => {\r\n          return (\r\n            <button className='drum-pad' id={item.id} key={item.key} onClick={() => {\r\n                const sound = document.getElementById(item.key);\r\n                sound.play();\r\n                setNameOfSound(item.id)\r\n              }}\r\n            >\r\n              <audio className='clip' id={item.key} src={item.src} / >\r\n              {item.key}\r\n            </button>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default DrumMachine;","import React from 'react';\nimport DrumMachine from './drumMachine'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DrumMachine />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}